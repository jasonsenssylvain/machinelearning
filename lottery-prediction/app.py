import pandas as pd
import numpy as np

from sklearn.preprocessing import StandardScaler

from keras.models import Sequential
from keras.layers import LSTM, Dense, Bidirectional, Dropout

df = pd.DataFrame(np.array([
		[13,40,20,52,5,15],[3,3,44,9,14,1],[11,1,15,38,8,46],[19,17,28,24,50,43],[16,57,4,57,49,44],[7,36,53,26,54,11],[39,24,21,13,44,20],[46,51,12,11,11,27],[37,16,42,46,49,37],[4,60,23,16,14,56],[47,34,33,51,27,32],[52,8,49,27,5,23],[45,59,54,22,43,18],[40,40,17,48,43,59],[42,56,59,59,5,31],[32,56,31,20,14,48],[37,48,32,27,41,17],[38,38,15,43,2,39],[30,50,2,6,53,48],[5,21,41,38,39,37],[34,22,56,61,9,42],[24,56,43,7,7,37],[30,8,34,2,31,54],[8,59,11,16,57,54],[49,49,11,4,23,23],[1,18,20,4,15,21],[42,51,30,27,8,37],[10,46,48,8,15,18],[20,15,9,41,26,26],[2,20,20,21,44,3],[11,58,44,9,28,22],[34,60,48,8,30,21],[8,52,20,3,21,9],[7,15,39,13,32,51],[18,55,41,56,27,37],[36,14,18,20,53,35],[4,31,49,45,10,27],[37,10,32,55,30,7],[43,7,32,54,17,14],[4,44,25,8,32,18],[12,18,23,25,23,17],[35,22,49,49,46,14],[11,49,16,15,48,61],[61,3,17,3,17,61],[43,21,4,55,2,40],[8,24,37,13,50,13],[30,28,29,25,30,26],[11,47,27,45,61,47],[37,2,54,30,43,35],[1,28,17,56,27,28],[37,20,59,61,51,7],[27,31,9,24,47,15],[7,8,37,22,39,6],[34,34,59,49,54,41],[17,4,7,11,53,47],[52,30,6,28,47,6],[15,37,21,52,39,44],[54,44,56,29,34,6],[50,59,12,52,11,2],[27,25,53,42,13,34],[29,53,27,17,20,23],[9,14,14,10,8,28],[11,18,57,3,40,53],[56,30,45,21,5,59],[11,31,60,25,42,59],[11,8,35,17,61,26],[60,45,16,30,43,7],[26,56,14,3,59,19],[24,3,57,22,59,2],[43,11,59,23,37,19],[4,24,2,55,21,48],[49,43,34,22,56,2],[13,52,13,24,31,36],[57,13,9,58,30,53],[47,32,41,46,37,57],[50,27,18,37,13,61],[9,29,27,34,13,9],[3,3,43,20,38,50],[26,2,36,34,31,43],[26,2,24,53,33,3],[7,39,46,37,44,2],[25,41,2,28,35,15],[26,51,1,37,38,3],[46,29,52,19,58,43],[60,25,10,33,45,10],[28,34,14,44,58,3],[37,49,52,49,13,26],[40,58,41,28,23,11],[41,51,20,16,55,16],[53,54,29,35,8,52],[43,15,30,10,39,20],[24,58,48,1,45,56],[9,2,46,24,61,61],[53,52,59,57,13,50],[42,40,52,60,61,49],[31,37,44,41,34,23],[41,31,48,11,46,44],[37,59,31,30,29,18],[54,31,23,48,9,16],[4,10,26,30,34,43],[25,58,45,29,5,35],[28,51,3,3,55,2],[47,55,45,52,38,6],[9,34,50,45,61,49],[14,5,61,26,18,25],[17,28,16,21,21,7],[50,2,61,28,15,56],[24,36,59,21,35,34],[52,20,7,42,18,20],[19,14,28,30,43,31],[1,59,17,9,50,58],[28,5,51,44,27,16],[22,37,55,53,50,17],[1,36,58,8,28,34],[46,10,2,46,19,25],[45,30,11,61,37,52],[60,16,61,26,28,51],[20,61,57,29,13,2],[24,58,37,12,27,57],[33,32,12,55,9,15],[60,7,37,43,47,36],[21,36,45,36,21,49],[36,3,17,50,18,39],[29,1,41,5,61,3],[60,7,25,20,51,11],[15,52,26,33,54,7],[37,52,33,32,13,47],[36,53,55,51,25,48],[41,41,34,31,22,55],[60,53,36,7,35,51],[39,38,40,60,35,9],[43,11,51,51,15,11],[20,44,13,56,22,21],[22,36,42,4,29,3],[58,23,26,42,4,58],[15,12,19,9,54,16],[32,39,28,16,16,3],[26,34,50,29,39,40],[29,5,20,47,42,25],[34,46,57,22,39,34],[48,45,35,30,8,16],[19,45,34,44,18,12],[12,30,13,36,44,52],[3,8,60,58,13,49],[44,47,52,28,33,32],[36,5,2,6,25,18],[59,31,32,49,59,48],[23,52,23,5,34,55],[14,34,14,9,40,25],[58,23,60,2,16,28],[38,23,28,61,40,23],[28,5,26,7,60,61],[51,33,48,46,48,57],[48,6,23,43,32,24],[24,31,4,33,7,32],[24,1,33,24,10,21],[12,35,4,10,34,27],[21,23,17,41,60,37],[19,55,47,32,42,27],[14,42,10,20,1,48],[6,52,59,56,35,61],[26,1,13,13,49,18],[33,54,2,56,45,45],[27,25,57,51,11,9],[14,44,9,61,37,61],[10,45,50,45,55,52],[36,23,8,26,26,20],[37,49,56,16,45,61],[19,50,21,29,19,22],[9,35,52,22,55,16],[19,40,55,43,6,7],[16,1,7,59,44,35],[5,59,12,21,20,22],[39,44,5,12,3,29],[31,34,35,4,40,38],[26,56,47,19,24,16],[29,2,50,25,28,5],[58,48,59,23,21,18],[4,6,46,40,42,33],[26,1,49,49,27,56],[32,21,13,31,8,54],[51,8,36,23,51,2],[11,57,13,52,35,17],[45,44,25,51,38,24],[6,60,33,38,43,60],[24,29,27,4,20,27],[58,47,34,2,42,28],[61,23,4,18,55,40],[10,29,6,18,41,7],[44,4,17,10,5,40],[8,40,9,47,60,5],[32,43,56,56,16,61],[7,5,22,55,36,11],[61,44,61,21,7,27],[28,11,6,34,14,10],[60,61,37,4,37,14],[26,3,44,29,41,31],[9,10,20,37,43,24],[3,6,30,48,25,48],[1,21,56,41,57,39]
	]),
	columns=list('ABCDEF'))
print(df.head())


scaler = StandardScaler().fit(df.values)
transformed_dataset = scaler.transform(df.values)
transformed_df = pd.DataFrame(data=transformed_dataset, index=df.index)
print(transformed_df)

number_of_rows = df.values.shape[0]
print("number_of_rows: ", number_of_rows)

window_length = 10  # amount of past games we need to take in consideration for prediction
number_of_features = df.values.shape[1]
print("number_of_features: ", number_of_features)


train = np.empty([number_of_rows - window_length, window_length, number_of_features], dtype=float)
label = np.empty([number_of_rows - window_length, number_of_features], dtype=float)

window_length = 10
for i in range(0, number_of_rows - window_length):
	train[i]=transformed_df.iloc[i:i+window_length, 0: number_of_features]
	label[i]=transformed_df.iloc[i+window_length: i + window_length + 1, 0: number_of_features]

print("train: ", train.shape)
print("label: ", label.shape)


batch_size = 100

model = Sequential()
model.add(Bidirectional(LSTM(240,
                             input_shape=(window_length, number_of_features),
                             return_sequences=True)))
model.add(Dropout(0.2))
model.add(Bidirectional(LSTM(240,
                             input_shape=(window_length, number_of_features),
                             return_sequences=True)))
model.add(Dropout(0.2))
model.add(Bidirectional(LSTM(240,
                             input_shape=(window_length, number_of_features),
                             return_sequences=True)))
model.add(Bidirectional(LSTM(240,
                             input_shape=(window_length, number_of_features),
                             return_sequences=False)))
model.add(Dense(59))
model.add(Dense(number_of_features))
model.compile(loss='mse', optimizer='rmsprop', metrics=['accuracy'])

model.fit(train, label, batch_size=batch_size, epochs=300)

## start predict
to_predict = np.array([
	[20,12,8,5,24,41],[60,28,13,7,23,18],[60,43,35,45,21,50],[48,54,42,48,39,21],[35,11,32,14,47,4],[26,34,5,20,27,58],[61,59,9,53,11,25],[51,58,9,3,55,56],[53,22,20,34,38,40],[52,28,61,40,40,7]
])
scaled_to_predict = scaler.transform(to_predict)
scaled_output = model.predict(np.array([scaled_to_predict]))
result_predict = scaler.inverse_transform(scaled_output).astype(int)[0]
print(result_predict)

